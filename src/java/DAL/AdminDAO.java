package DAL;

import java.sql.*;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.Optional;

public class AdminDAO {

    // ====== DOANH THU ======

    /** üßæ T·ªïng doanh thu h√¥m nay */
    public double getTodayRevenue() {
        String sql = """
            SELECT SUM(amount) 
            FROM Payment 
            WHERE CAST(paid_at AS DATE) = CAST(GETDATE() AS DATE)
              AND status = 'success'
        """;
        return querySingleDouble(sql);
    }

    /** üí∞ T·ªïng doanh thu th√°ng hi·ªán t·∫°i */
    public double getMonthRevenue() {
        String sql = """
            SELECT SUM(amount)
            FROM Payment
            WHERE MONTH(paid_at) = MONTH(GETDATE())
              AND YEAR(paid_at) = YEAR(GETDATE())
              AND status = 'success'
        """;
        return querySingleDouble(sql);
    }

    /** üíµ T·ªïng doanh thu nƒÉm hi·ªán t·∫°i */
    public double getYearRevenue() {
        String sql = """
            SELECT SUM(amount)
            FROM Payment
            WHERE YEAR(paid_at) = YEAR(GETDATE())
              AND status = 'success'
        """;
        return querySingleDouble(sql);
    }

    // ====== TH·ªêNG K√ä KH√ÅC ======

    /** üéüÔ∏è T·ªïng s·ªë v√© b√°n ra */
    public int getTotalTicketsSold() {
        String sql = """
            SELECT COUNT(*) 
            FROM BookingItem bi
            JOIN Booking b ON bi.booking_id = b.booking_id
            JOIN Payment p ON p.booking_id = b.booking_id
            WHERE p.status = 'success'
        """;
        return querySingleInt(sql);
    }

    /** üé¨ S·ªë l∆∞·ª£ng phim ƒëang chi·∫øu */
    public int getNowShowingCount() {
        String sql = "SELECT COUNT(*) FROM Movie WHERE status = 'now showing'";
        return querySingleInt(sql);
    }

    /** üéûÔ∏è S·ªë l∆∞·ª£ng phim s·∫Øp chi·∫øu */
    public int getComingSoonCount() {
        String sql = "SELECT COUNT(*) FROM Movie WHERE status = 'coming soon'";
        return querySingleInt(sql);
    }

    /** üè¢ T·ªïng s·ªë r·∫°p ƒëang ho·∫°t ƒë·ªông */
    public int getActiveCinemas() {
        String sql = "SELECT COUNT(*) FROM Auditorium";
        return querySingleInt(sql);
    }

    /** üë• T·ªïng s·ªë ng∆∞·ªùi d√πng */
    public int getTotalUsers() {
        String sql = "SELECT COUNT(*) FROM Users";
        return querySingleInt(sql);
    }

    /** ‚≠ê ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh c·ªßa t·∫•t c·∫£ phim */
    public double getAverageRating() {
        String sql = "SELECT AVG(CAST(rating AS FLOAT)) FROM Review";
        return querySingleDouble(sql);
    }

    // ====== H·ªñ TR·ª¢ ======

    private double querySingleDouble(String sql) {
        try (Connection conn = DBContext.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return Optional.ofNullable(rs.getDouble(1)).orElse(0.0);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0.0;
    }

    private int querySingleInt(String sql) {
        try (Connection conn = DBContext.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    // ====== T√ôY CH·ªåN M·ªû R·ªòNG ======

    /** üìÖ L·∫•y doanh thu trong kho·∫£ng ng√†y */
    public double getRevenueByDateRange(LocalDate start, LocalDate end) {
        String sql = """
            SELECT SUM(amount)
            FROM Payment
            WHERE CAST(paid_at AS DATE) BETWEEN ? AND ?
              AND status = 'success'
        """;
        try (Connection conn = DBContext.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setDate(1, Date.valueOf(start));
            ps.setDate(2, Date.valueOf(end));
            ResultSet rs = ps.executeQuery();
            if (rs.next()) return rs.getDouble(1);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0.0;
    }

    /** üìä Doanh thu theo th√°ng trong nƒÉm hi·ªán t·∫°i */
    public double[] getMonthlyRevenueThisYear() {
        double[] data = new double[12];
        String sql = """
            SELECT MONTH(paid_at) AS m, SUM(amount) AS total
            FROM Payment
            WHERE YEAR(paid_at) = YEAR(GETDATE())
              AND status = 'success'
            GROUP BY MONTH(paid_at)
        """;
        try (Connection conn = DBContext.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                int month = rs.getInt("m");
                double total = rs.getDouble("total");
                data[month - 1] = total;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return data;
    }
}
